@page "/minesweeper"
@using BlazorGames.Data.Minesweeper;
@using BlazorGames.Games.Minesweeper;
@using Microsoft.AspNetCore.Components.Web;
@using System.Diagnostics;
@using System.Linq;
@using BlazorGames.Services;
@using BlazorGames.Data.GameDb;
@inject IEntityBaseRepository<MinesweeperGameResult> _resultRepository

<h1>Minesweeper</h1>

<p>
    Choose a board size:
    <select data-val="true" @bind="_boardSize">
        <option selected="selected" value="10">10x10</option>
        <option value="20">20x20</option>
        <option value="30">30x30</option>
    </select>

    Choose a mine count:
    <select data-val="true" @bind="_mineCount">
        <option value="4">4</option>
        <option selected="selected" value="10">10</option>
        <option value="25">25</option>
        <option value="25">50</option>
        <option value="100">100</option>
    </select>
</p>
<p>
    <button @onclick="@(() => Reset())" type="button" class="btn btn-success">Start Game</button>
</p>

@code{
    private int _boardSize { get; set; } = 10;
    private int _mineCount { get; set; } = 10;
    private string _player { get; set; }

    private GameBoard _board;
    bool isWinner = false;
    bool isLoser = false;
    int flagCounter = 0;
    int correctGuess = 0;
    bool start = false;
    int seconds = 0;
    private System.Threading.Timer _timer;
    private Stopwatch _stopwatch;

    protected override void OnInitialized()
    {
        _board = GameBoardGenerator
            .Generate(_boardSize, _mineCount);
        _stopwatch = new Stopwatch();
    }

    private void StopTimers()
    {
        _timer.Dispose();
        _stopwatch.Stop();
    }

    private void PieceClicked(MouseEventArgs args, int x, int y)
    {
        if (!start)
        {
            _stopwatch.Start();
            _timer = new System.Threading.Timer((_) =>
            {
                InvokeAsync(() =>
                {
                    ++seconds;
                    this.StateHasChanged();
                });
            }, null, 1000, 1000);
            start = true;
        }

        if (!isWinner && !isLoser)
        {
            var boardPiece = _board.Board[x, y];
            if (args.Button == 0)
            {
                if (boardPiece.IsMine)
                {
                    boardPiece.Color = PieceColor.Mine;
                    isLoser = true;
                    StopTimers();
                }
                else
                {
                    if (boardPiece.NeighborBombCount == 0)
                    {
                        boardPiece.Color = PieceColor.Blank;
                        GameBoardRevealer.Reveale(_board, (x, y), _boardSize);
                    }
                    else
                    {
                        boardPiece.IsRevealed = true;
                        boardPiece.Color = PieceColor.NeighborBomb;
                    }
                }
            }
            if (args.Button == 2)
            {
                if (boardPiece.Color == PieceColor.MineFlag)
                {
                    boardPiece.Color = PieceColor.Initial;
                    --flagCounter;
                    if (boardPiece.IsMine) --correctGuess;
                }
                else
                {
                    boardPiece.Color = PieceColor.MineFlag;
                    ++flagCounter;
                    if (boardPiece.IsMine) ++correctGuess;
                }
            }

            if (correctGuess == _mineCount)
            {
                isWinner = true;
                StopTimers();
            }
        }
    }

    private string GetBoardContent(int x, int y)
    {
        return _board.Board[x, y].IsRevealed && _board.Board[x, y].NeighborBombCount != 0
            ? _board.Board[x, y].NeighborBombCount.ToString()
            : "";
    }

    private void Reset()
    {
        _board = GameBoardGenerator.Generate(_boardSize, _mineCount);
        isWinner = false;
        isLoser = false;
        flagCounter = 0;
        correctGuess = 0;
        seconds = 0;
        start = false;
        _stopwatch.Reset();
        _timer?.Dispose();
    }

    private void SaveResult(string name, TimeSpan time, int size, int minesCount)
    {
        var entry = new MinesweeperGameResult
        {
            PlayerName = name,
            GameTime = time,
            BoardSizeX = size,
            BoardSizeY = size,
            MinesCount = minesCount
        };
        _resultRepository.Create(entry);
    }
}

@if (_boardSize == 0
    || (_board.Board.Length == _boardSize * _boardSize
    && _board.Board.Cast<GamePiece>().ToArray().Count(x => x.IsMine) == _mineCount))
{
    @if (isWinner)
    {
        <h2>You WIN! </h2>
        <h2>@_stopwatch.Elapsed.ToString(@"hh\:mm\:ss\:ms")</h2>

        <div class="form-popup">
            <form class="form-container">
                <label for="name"><b>Name</b></label>
                <input type="text" placeholder="Enter Name" @bind="_player" name="name" required>

                <button type="submit" class="btn" @onclick="@(() => SaveResult(_player, _stopwatch.Elapsed, _boardSize, _mineCount))">Enter Result</button>
            </form>
        </div>

        <h3>Top 5 results for @_boardSize x@_boardSize with @_mineCount mines</h3>
        <table class="table">
            <thead>
                <tr>
                    <th>
                        Name
                    </th>
                    <th>
                        Time
                    </th>
                    <th>
                        Size
                    </th>
                    <th>
                        #Mines
                    </th>
                </tr>
            </thead>
            <tbody>
                @foreach (var item in _resultRepository
                    .GetAll(r => r.MinesCount == _mineCount && r.BoardSizeX == _boardSize)
                    .OrderBy(r => r.GameTime)
                    .Take(5))
                {
                    <tr>
                        <td>
                            @item.PlayerName
                        </td>
                        <td>
                            @item.GameTime.ToString(@"hh\:mm\:ss\:ms")
                        </td>
                        <td>
                            @item.BoardSizeX x @item.BoardSizeY
                        </td>
                        <td>
                            @item.MinesCount
                        </td>
                    </tr>
                }
            </tbody>
        </table>
    }
    else
    {
        if (isLoser)
        {
            <h2>You LOSE! </h2>
        }
        else
        {
            <h2>@flagCounter / @_mineCount</h2>
            <h2>Time: @seconds</h2>
        }

        <div class="minesboard">
            @for (int i = 0; i < _boardSize; i++)
            {
                <div class="minescolumn">
                    @for (int j = 0; j < _boardSize; j++)
                    {
                        int x = i;
                        int y = j;

                        <div class="minesgamepiece @_board.Board[i, j].Color.ToString().ToLower()"
                             @onclick="@((args) => PieceClicked(args, x, y))"
                             oncontextmenu="return false;"
                             @onmouseup="@((args) => PieceClicked(args, x, y))">
                            @GetBoardContent(x, y)
                        </div>
                    }
                </div>
            }
        </div>
    }
}